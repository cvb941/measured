"use strict";(self.webpackChunkdoodle_docs=self.webpackChunkdoodle_docs||[]).push([[552],{2132:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>C,contentTitle:()=>j,default:()=>k,frontMatter:()=>b,metadata:()=>M,toc:()=>T});var t=i(7624),s=i(4552),a=i(1504);i(4912);var r=i(2480);const o="-measured/io.nacular.measured.units",u={Units:m("Units",`${o}/-units`),Measure:m("Measure",`${o}/-measure`),meters:m("meters",`${o}/-length/-companion/meters.html`),kilograms:m("kilograms",`${o}/-mass/-companion/kilograms.html`),measure:{as:m("as",`${o}/-measure/as.html`),in:m("in",`${o}/-measure/in.html`)}};function m(e,n){const i=`https://nacular.github.io/measured-api/${n}`;return()=>(0,t.jsx)("code",{children:(0,t.jsx)(r.c,{to:i,children:e})})}var l=i(7104);class d extends a.Component{constructor(e){super(e),this.mode=e.language??"kotlin",this.code=e.children,this.ref=a.createRef()}node;parent;componentDidMount(){switch(this.node=this.ref.current,this.parent=(0,l.findDOMNode)(this).parentNode??null,!0){case!this.withinTabbedPanel():this.convertToPlayground();break;case this.parentHidden():this.startObservingHiddenState();break;default:setTimeout((()=>{if(!0==!this.parentHidden())this.convertToPlayground();else this.startObservingHiddenState()}))}}convertToPlayground(){this.node.className="kotlin-playground",KotlinPlayground(`.${this.node.className}`)}startObservingHiddenState(){let e=new MutationObserver((n=>{n.forEach((n=>{"attributes"!==n.type||"hidden"!==n.attributeName||n.target.hidden||(this.convertToPlayground(),e.disconnect())}))}));e.observe(this.parent,{attributeFilter:["hidden"],childList:!1})}parentHidden(){return this.parent.hasAttribute("hidden")}withinTabbedPanel(){return"tabpanel"===this.parent.getAttribute("role")}render(){return(0,t.jsx)("code",{theme:"darcula",mode:this.mode,"data-highlight-only":!0,ref:this.ref,children:this.code})}}const c="import io.nacular.measured.units.Measure\nimport io.nacular.measured.units.Time\nimport io.nacular.measured.units.Time.Companion.milliseconds\n\n//sampleStart\ninterface Clock {\n    fun now(): Measure<Time>\n}\n\nfun handleUpdate(duration: Measure<Time>) {\n    // ...\n    reportTimeInMillis(duration `in` milliseconds)\n}\n\nfun update(clock: Clock) {\n    val startTime = clock.now()\n\n//...\n\n    handleUpdate(clock.now() - startTime)\n}\n\nfun reportTimeInMillis(time: Double) {}\n//sampleEnd",p="import io.nacular.measured.units.Length.Companion.kilometers\nimport io.nacular.measured.units.Length.Companion.meters\nimport io.nacular.measured.units.Length.Companion.miles\nimport io.nacular.measured.units.Measure\nimport io.nacular.measured.units.Time\nimport io.nacular.measured.units.Time.Companion.hours\nimport io.nacular.measured.units.Time.Companion.milliseconds\nimport io.nacular.measured.units.Time.Companion.minutes\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.div\nimport io.nacular.measured.units.times\n\nfun complexUnits() {\n//sampleStart\n    val velocity     = 5 * meters / seconds\n    val acceleration = 9 * meters / (seconds * seconds)\n    val time         = 1 * minutes\n\n//  d            = vt + \xbdat\xb2\n    val distance     = velocity * time + 1.0 / 2 * acceleration * time * time\n\n    println(distance                ) // 16500 m\n    println(distance `as` kilometers) // 16.5 km\n    println(distance `as` miles     ) // 10.25262467191601 mi\n\n    println(5 * miles / hours `as` meters / seconds) // 2.2352 m/s\n//sampleEnd\n}",h="import io.nacular.measured.units.Length\nimport io.nacular.measured.units.Length.Companion.kilometers\nimport io.nacular.measured.units.Length.Companion.meters\nimport io.nacular.measured.units.Length.Companion.miles\nimport io.nacular.measured.units.Measure\nimport io.nacular.measured.units.Time\nimport io.nacular.measured.units.Time.Companion.hours\nimport io.nacular.measured.units.Time.Companion.milliseconds\nimport io.nacular.measured.units.Time.Companion.minutes\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.UnitsRatio\nimport io.nacular.measured.units.Velocity\nimport io.nacular.measured.units.div\nimport io.nacular.measured.units.times\n\n//sampleStart\nval marathon              = 26 * miles\nval velocity              = 3 * kilometers / hours\nval timeToRunHalfMarathon = (marathon / 2) / velocity // 6.973824 hr\n\nfun calculateTime(distance: Measure<Length>, velocity: Measure<Velocity>): Measure<Time> {\n    return distance / velocity\n}\n//sampleEnd",v="import io.nacular.measured.units.Angle\nimport io.nacular.measured.units.Angle.Companion.radians\nimport io.nacular.measured.units.Length\nimport io.nacular.measured.units.Length.Companion.kilometers\nimport io.nacular.measured.units.Length.Companion.meters\nimport io.nacular.measured.units.Length.Companion.miles\nimport io.nacular.measured.units.Measure\nimport io.nacular.measured.units.Time\nimport io.nacular.measured.units.Time.Companion.hours\nimport io.nacular.measured.units.Time.Companion.milliseconds\nimport io.nacular.measured.units.Time.Companion.minutes\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.UnitsProduct\nimport io.nacular.measured.units.UnitsRatio\nimport io.nacular.measured.units.Velocity\nimport io.nacular.measured.units.div\nimport io.nacular.measured.units.times\n\n//sampleStart\nval a: UnitsProduct<Angle, Time> = radians * seconds\nval b: UnitsProduct<Time, Angle> = seconds * radians\n//sampleEnd",g="import io.nacular.measured.units.Length\nimport io.nacular.measured.units.Length.Companion.meters\nimport io.nacular.measured.units.Mass\nimport io.nacular.measured.units.Mass.Companion.kilograms\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.div\nimport io.nacular.measured.units.times\n\n//sampleStart\n// ensure Mass comes before Length when Length * Mass\noperator fun Length.times(mass: Mass) = mass * this\n\nval f1 = 1 * (kilograms * meters) / (seconds * seconds)\nval f2 = 1 * (meters * kilograms) / (seconds * seconds)\n\n// f1 and f2 now have the same type\n//sampleEnd",x="import io.nacular.measured.units.Length\nimport io.nacular.measured.units.Length.Companion.meters\nimport io.nacular.measured.units.Mass\nimport io.nacular.measured.units.Mass.Companion.kilograms\nimport io.nacular.measured.units.Measure\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.div\nimport io.nacular.measured.units.times\n\n//sampleStart\n// ensure Mass comes before Length when Measure<Length> multiplied by Mass\noperator fun Measure<Length>.times(mass: Mass) = amount * (units * mass)\n//sampleEnd",f='import io.nacular.measured.units.Length\nimport io.nacular.measured.units.Length.Companion.meters\nimport io.nacular.measured.units.Length.Companion.miles\nimport io.nacular.measured.units.Measure\nimport io.nacular.measured.units.Time.Companion.hours\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.Velocity\nimport io.nacular.measured.units.div\nimport io.nacular.measured.units.times\n\nfun hands() {\n//sampleStart\n    val hands = Length("hands", 0.1016)                 // define new Length unit\n\n    val l1 = 5 * hands\n    val l2 = l1 `as` meters                             // convert to Measure with new unit\n\n    val v: Measure<Velocity> = 100_000 * hands / hours\n\n    println("$l1 == $l2 or ${l1 `in` meters}")          // 5.0 hands == 0.508 m or 0.508\n\n    println(v `as` hands / seconds)                     // 27.77777777777778 hands/s\n    println(v `as` miles / hours  )                     // 6.313131313131313 mi/hr\n//sampleEnd\n}\n',y='import Blits.Companion.blat\nimport Blits.Companion.blick\nimport Blits.Companion.bloop\nimport io.nacular.measured.units.InverseUnits\nimport io.nacular.measured.units.Length\nimport io.nacular.measured.units.Measure\nimport io.nacular.measured.units.Time\nimport io.nacular.measured.units.Time.Companion.minutes\nimport io.nacular.measured.units.Time.Companion.seconds\nimport io.nacular.measured.units.Units\nimport io.nacular.measured.units.UnitsProduct\nimport io.nacular.measured.units.UnitsRatio\nimport io.nacular.measured.units.div\nimport io.nacular.measured.units.times\n\n//sampleStart\n// Define a custom Units type\nclass Blits(suffix: String, ratio: Double = 1.0): Units(suffix, ratio) {\n    operator fun div(other: Blits) = ratio / other.ratio\n\n    companion object {\n        // Various conversions\n\n        val bloop = Blits("bp"        ) // the base unit\n        val blick = Blits("bk",   10.0)\n        val blat  = Blits("cbt", 100.0)\n    }\n}\n\n// Some typealiases to help with readability\n\ntypealias BlitVelocity     = UnitsRatio<Blits, Time>\ntypealias BlitAcceleration = UnitsRatio<Blits, UnitsProduct<Time, Time>>\n\nval m1: Measure<BlitAcceleration>   = 5 * blat / (seconds * seconds)\nval m2: Measure<BlitVelocity>       = m1 * 10 * minutes\nval m3: Measure<InverseUnits<Time>> = m2 / (5 * blick)\n//sampleEnd\n',b={slug:"/",title:"Measured",hide_title:!0,description:"Intuitive, strongly typed units."},j=void 0,M={id:"introduction",title:"Measured",description:"Intuitive, strongly typed units.",source:"@site/docs/introduction.mdx",sourceDirName:".",slug:"/",permalink:"/measured/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{slug:"/",title:"Measured",hide_title:!0,description:"Intuitive, strongly typed units."},sidebar:"defaultSidebar"},C={},T=[{value:"Complex units",id:"complex-units",level:2},{value:"Avoid raw values",id:"avoid-raw-values",level:2},{value:"Extensible",id:"extensible",level:2},{value:"Current Limitations",id:"current-limitations",level:2},{value:"Installation",id:"installation",level:2},{value:"Contact",id:"contact",level:2}];function w(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.M)(),...e.components};return u||L("api",!1),u.Measure||L("api.Measure",!0),u.Units||L("api.Units",!0),u.kilograms||L("api.kilograms",!0),u.measure||L("api.measure",!1),u.measure.as||L("api.measure.as",!0),u.measure.in||L("api.measure.in",!0),u.meters||L("api.meters",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("div",{style:{textAlign:"center"},children:(0,t.jsx)("img",{src:"img/measured.png",alt:"measured",style:{marginBottom:"50px"}})}),"\n",(0,t.jsx)("div",{style:{textAlign:"center",marginBottom:"50px"},children:(0,t.jsx)("h2",{children:"Intuitive, Type-safe Units"})}),"\n",(0,t.jsx)(n.p,{children:"Measured provides a safe and simple way to work with units of measure. It uses the compiler to ensure correctness, and provides intuitive, mathematical operations to work with any units."}),"\n",(0,t.jsx)(n.p,{children:"This means you can write more robust code that avoids implicit units. Time handling for example, is often done with implicit assumptions about milliseconds vs microseconds or seconds. Measured helps you avoid pitfalls like these."}),"\n",(0,t.jsx)(d,{children:c}),"\n",(0,t.jsx)(n.h2,{id:"complex-units",children:"Complex units"}),"\n",(0,t.jsxs)(n.p,{children:["Measured makes working with complex units easy. Simply use division and multiplication to create compound ",(0,t.jsx)(u.Measure,{}),"s. Convert between these safely and easily with the ",(0,t.jsx)(u.measure.as,{})," and ",(0,t.jsx)(u.measure.in,{})," methods."]}),"\n",(0,t.jsx)(d,{children:p}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(u.measure.as,{})," method converts a ",(0,t.jsx)(u.Measure,{})," from its current ",(0,t.jsx)(u.Units,{})," to another (of the same type). The result is another ",(0,t.jsx)(n.code,{children:"Measure"}),". While ",(0,t.jsx)(u.measure.in,{})," returns the magnitude of a ",(0,t.jsx)(n.code,{children:"Measure"})," in the given ",(0,t.jsx)(n.code,{children:"Units"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"avoid-raw-values",children:"Avoid raw values"}),"\n",(0,t.jsx)(n.p,{children:"Measure's support of math operators helps you avoid working with raw values directly."}),"\n",(0,t.jsx)(d,{children:h}),"\n",(0,t.jsx)(n.h2,{id:"extensible",children:"Extensible"}),"\n",(0,t.jsx)(n.p,{children:"You can easily add new conversions to existing units and they will work as expected."}),"\n",(0,t.jsx)(d,{children:f}),"\n",(0,t.jsx)(n.p,{children:"You can also define entirely new units with a set of conversions and have them interact with other units."}),"\n",(0,t.jsx)(d,{children:y}),"\n",(0,t.jsx)(n.h2,{id:"current-limitations",children:"Current Limitations"}),"\n",(0,t.jsxs)(n.p,{children:["Measured uses Kotlin's type system to enable compile-time validation. This works really well in most cases, but there are things the type system currently does not support. For example, ",(0,t.jsx)(u.Units,{})," and ",(0,t.jsx)(u.Measure,{}),"s are ",(0,t.jsx)(n.strong,{children:"order-sensitive"}),"."]}),"\n",(0,t.jsx)(d,{children:v}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Notice the types for ",(0,t.jsx)(n.code,{children:"a"})," and ",(0,t.jsx)(n.code,{children:"b"})," are different"]})}),"\n",(0,t.jsxs)(n.p,{children:["This can be mitigated on a case by case basis with explicit extension functions that help with order. For example, you can ensure that ",(0,t.jsx)(u.kilograms,{})," is sorted before ",(0,t.jsx)(u.meters,{})," by providing the following extension."]}),"\n",(0,t.jsx)(d,{children:g}),"\n",(0,t.jsx)(n.p,{children:"You can also define an extension on Measure to avoid needing parentheses around kilograms and meters."}),"\n",(0,t.jsx)(d,{children:x}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsxs)(n.p,{children:["Measured is a Kotlin ",(0,t.jsx)(n.a,{href:"https://kotlinlang.org/docs/multiplatform-get-started.html",children:"Multi-platform"})," library that targets a wide range of platforms. Simply add a dependency to your app's Gradle build file as follows to start using it."]}),"\n",(0,t.jsx)(d,{children:'\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation("io.nacular.measured:measured:$VERSION")\n}\n'}),"\n",(0,t.jsx)(n.h2,{id:"contact",children:"Contact"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Please see ",(0,t.jsx)(n.a,{href:"https://github.com/cvb941/measured/issues",children:"issues"})," to share bugs you find, make feature requests, or just get help with your questions."]}),"\n",(0,t.jsxs)(n.li,{children:["Don't hesitate to \u2b50\ufe0f ",(0,t.jsx)(n.a,{href:"https://github.com/cvb941/measured",children:"star"})," if you find this project useful."]}),"\n"]})]})}function k(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(w,{...e})}):w(e)}function L(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},4552:(e,n,i)=>{i.d(n,{I:()=>o,M:()=>r});var t=i(1504);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);
